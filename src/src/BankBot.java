import java.util.Scanner;
//Класс BankBot. Этот класс заводит новый счёт для пользователя, обрабатывает выбранное пользователем действие над счётом и запрашивает информацию о счёте из другого класса соответствующего выбору пользователя (Regular, Advanced, Junior).
public class BankBot {

    Scanner scanner = new Scanner(System.in); //Объявление сканера для ввода с консоли новых значений.
    private String name; //Поле для хранения имени владельца.
    private String surname; //Поле для хранения фамилии владельца.
    private String patronymic; //Поле для хранения отчества владельца.
    public double balance; //Поле для хранения количества денег владельца, которые он хочет положить на счёт.
    private int accountType; //Поле для хранения номера выбранного типа счёта.
    private int checkedPinCode; //Поле для хранения ПИН-кода владельца.
    private String accountName; //Поле для хранения названия счёта.
    private boolean regularAccount = false; //Поле для проверки на наличие у владельца аккаунта ОБЫЧНОГО счёта. По умолчанию false, потому что счёт ещё не заведён.
    private boolean advancedAccount = false; //Поле для проверки на наличие у владельца аккаунта ПОДВИНУТОГО счёта. По умолчанию false, потому что счёт ещё не заведён.
    private boolean juniorAccount = false; //Поле для проверки на наличие у владельца аккаунта МОЛОДЁЖНОГО счёта. По умолчанию false, потому что счёт ещё не заведён.
    private double replenishment; //Поле для ввода новой суммы для пополнения счёта или снятия денег.
    private String shopName; //Поле для хранения названия магазина.
    private boolean exit = false; //Поле для проверки вышел ли владелец счёта из аккаунта.
    private int choice; //Поле для хранения номера выбранной операции над счётом.

    public Regular regular; //Объявление класса "Regular".
    public Advanced advanced; //Объявление класса "Advanced".
    public Junior junior; //Объявление класса "Junior".
    //Метод возвращающий информацию об успешно заведённом счёте.
    void accountDetails() {
        //Вывод информации об успешно заведённом счёте.
        System.out.println("\nУспешное открытие счёта\n*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*\nВы открыли счёт " + accountName + " на имя: \n" + name + " " + surname + " " + patronymic + "\nНа счёт зачислено: " + balance + " руб.\n" + "*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*");
    }
    //Метод проверяющий ПИН-код на количество введённых значений.
    void checkPinCodeLength(int pinCode) {
        //Цикл с условием "если количество символов в ПИН-коде не равно 4".
        while (String.valueOf(pinCode).length() != 4) {
            //Вывод информации о том что ПИН-код содержит либо более, либо менее 4 символов.
            System.out.println("\nВведённый ПИН-код содержит либо более, либо менее 4 цифр.\nВведите ПИН-код содержащий именно 4 цифры: ");
            //Сканирование нового ПИН-кода.
            pinCode = scanner.nextInt();
        }
        //Присвоение переменной правильного проверенного ПИН-кода.
        checkedPinCode = pinCode;
        //Вывод информации об успешно созданном ПИН-коде.
        System.out.println("\nПИН-код успешно создан!");
    }
    //Метод, приветствующий пользователя.
    void helloUser(){
        //Приветствие пользователя.
        System.out.println("Приветствую, я ваша персональная помощница Дарья, сотрудница данного банка.");
    }
    //Метод реализующий взаимодействие программы с пользователем.
    void bankBot() {
       //Цикл с условием пока пользователь не вышел из аккаунта:
        while (!exit) {
            //Вывод информации о действиях над счётом.
            System.out.println("\nЧто бы вы хотели сделать?\n\n1. Открыть счёт.\n2. Пополнить счёт.\n3. Снять деньги.\n4. Запросить баланс.\n5. Оплатить покупку с помощью счёта.\n6. Получить информацию о владельце счёта.\n7. Рассчитать комиссию и штраф.\n8. Вывести детализированную информацию по счёту.\n9. Выйти из аккаунта.\n(Выберите номер действия)");
            //Запись номера выбранного действия над счётом.
            choice = scanner.nextInt();
            //Условие если выбранный номер операции над счётом находится в диапазоне от 2 до 8:
            if (choice > 1 & choice < 9) {
                //Вывод информации о необходимости ввести номер типа счёта над которым должна совершиться выбранная ранее операция.
                System.out.println("\nВведите номер типа счёта над котором вы бы хотели совершить данное действие:\n\n1. Обычный.\n2. Продвинутый.\n3. Молодёжный.");
                //Запись в переменную ПИН-кода.
                accountType = scanner.nextInt();
                //Условие исключающее ошибку "если выбранный тип счёта ещё не заведён":
                if ((accountType == 1 & !regularAccount) || (accountType == 2 & !advancedAccount) || (accountType == 3 & !juniorAccount)) {
                    //Вывод информации об ошибке.
                    System.out.println("\nУ вас ещё нет открытого счёта этого типа.\n Для начала откройте счёт данного типа.");
                }
                //Если выбранный тип счёта уже заведён:
                else {
                    //Вывод информации о необходимости ввести ПИН-код.
                    System.out.println("\nВведите ПИН-код выбранного счёта.");
                    //Считывание введённого ПИН-кода.
                    checkedPinCode = scanner.nextInt();
                    //Цикл исключающий ошибку "Если введённый ПИН-код к выбранному типу счёта не верный":
                    while ((accountType == 1 && String.valueOf(checkedPinCode).hashCode() != regular.getPinCode()) || (accountType == 2 && String.valueOf(checkedPinCode).hashCode() != advanced.getPinCode()) || (accountType == 3 && String.valueOf(checkedPinCode).hashCode() != junior.getPinCode())) {
                        //Вывод информации об ошибке.
                        System.out.println("\nВведённый ПИН-код не верный! Пожалуйста, обратитесь за помощью в техподдержку или введите другой ПИН-код: ");
                        //Запись в переменную нового ПИН-кода.
                        checkedPinCode = scanner.nextInt();
                    }
                    switch (choice) {
                        case 2: //Если выбрана операция "Пополнение счёта":
                            //Вывод информации необходимой для совершения операции.
                            System.out.println("\nВведите сумму которую вы бы хотели положить на данный счёт: ");
                            //Запись в переменную суммы, которой нужно пополнить счёт.
                            replenishment = scanner.nextDouble();
                            //Условие если выбран ОБЫЧНЫЙ тип счёта:
                            if (accountType == 1) {
                                //Вызов метода пополняющего счёт из класса "Regular" и передача суммы списания.
                                regular.topUpAccount(replenishment);
                            }
                            //Условие если выбран ПРОДВИНУТЫЙ тип счёта:
                            else if (accountType == 2) {
                                //Вызов метода пополняющего счёт из класса "Advanced" и передача суммы списания.
                                advanced.topUpAccount(replenishment);
                            }
                            //Условие если выбран МОЛОДЁЖНЫЙ тип счёта:
                            else if (accountType == 3) {
                                //Вызов метода пополняющего счёт из класса "Junior" и передача суммы списания.
                                junior.topUpAccount(replenishment);
                            }
                            break;
                        case 3: //Если выбрана операция "Снятие денег":
                            //Вывод информации необходимой для совершения операции.
                            System.out.println("\nВведите сумму которую вы бы хотели снять с данного счёта: ");
                            //Запись в переменную суммы, которую нужно снять со счёта.
                            replenishment = scanner.nextDouble();
                            //Цикл исключающий ошибку "Если введённая сумма превышает баланс выбранного счёта":
                            while ((accountType == 1 && replenishment > regular.getBalance()) || (accountType == 2 && replenishment > advanced.getBalance()) || (accountType == 3 && replenishment > junior.getBalance())) {
                                //Вывод информации об ошибке.
                                System.out.println("\nНа вашем счёте недостаточно средств!\nЕсли хотите снять наличные, пожалуйста введите сумму не превышающую баланс счёта.");
                                //Запись в переменную новой введённой суммы.
                                replenishment = scanner.nextDouble();
                            }
                            //Условие если выбран ОБЫЧНЫЙ тип счёта:
                            if (accountType == 1) {
                                //Вызов метода списывающего деньги из класса "Regular" и передача суммы списания.
                                regular.withdrawMoney(replenishment);
                            }
                            //Условие если выбран ПРОДВИНУТЫЙ тип счёта:
                            else if (accountType == 2) {
                                //Вызов метода списывающего деньги из класса "Advanced" и передача суммы списания.
                                advanced.withdrawMoney(replenishment);
                            }
                            //Условие если выбран МОЛОДЁЖНЫЙ тип счёта:
                            else if (accountType == 3) {
                                //Вызов метода списывающего деньги из класса "Junior" и передача суммы списания.
                                junior.withdrawMoney(replenishment);
                            }
                            break;
                        case 4: //Если выбрана операция "Запрос баланса":
                            //Условие если выбран ОБЫЧНЫЙ тип счёта:
                            if (accountType == 1) {
                                //Вывод баланса счёта.
                                System.out.println("\nБаланс вашего счёта составляет: " + regular.getBalance());
                            }
                            //Условие если выбран ПРОДВИНУТЫЙ тип счёта:
                            else if (accountType == 2) {
                                //Вывод баланса счёта.
                                System.out.println("\nБаланс вашего счёта составляет: " + advanced.getBalance());
                            }
                            //Условие если выбран МОЛОДЁЖНЫЙ тип счёта:
                            else if (accountType == 3) {
                                //Вывод баланса счёта.
                                System.out.println("\nБаланс вашего счёта составляет: " + junior.getBalance());
                            }
                            break;
                        case 5: //Если выбрана операция "Оплатить покупку с помощью счёта":
                            //Вывод информации необходимой для совершения операции.
                            System.out.println("\nВведите название магазина, в котором вы хотите совершить оплату с данного счёта:");
                            //Запись в переменную введённого названия магазина.
                            shopName = scanner.next();
                            //Вывод информации необходимой для совершения операции.
                            System.out.println("\nВведите сумму которую вы бы хотели перевести магазину \"" + shopName + "\": ");
                            //Запись в переменную введённой суммы.
                            replenishment = scanner.nextDouble();
                            System.out.println(replenishment);
                            //Условие исключающее ошибку если введённая сумма превышает баланс выбранного счёта:
                            if ((accountType == 1 && replenishment > regular.getBalance()) || (accountType == 2 && replenishment > advanced.getBalance()) || (accountType == 3 && replenishment > junior.getBalance())) {
                                //Вывод сообщения об ошибке и баланса счёта.
                                System.out.println("\nНа вашем счёте недостаточно средств для совершения покупки!");
                            } else {
                                //Условие если выбран ОБЫЧНЫЙ тип счёта:
                                if (accountType == 1) {
                                    //Передача названия магазина в переменную класса "Regular".
                                    regular.setShopName(shopName);
                                    //Вызов метода по расчёту оплаты покупки из класса "Regular" и передача суммы списания.
                                    regular.payForThePurchase(replenishment);
                                }
                                //Условие если выбран ПРОДВИНУТЫЙ тип счёта:
                                else if (accountType == 2) {
                                    //Передача названия магазина в переменную класса "Advanced".
                                    advanced.setShopName(shopName);
                                    //Вызов метода по расчёту оплаты покупки из класса "Advanced" и передача суммы списания.
                                    advanced.payForThePurchase(replenishment);
                                }
                                //Условие если выбран МОЛОДЁЖНЫЙ тип счёта:
                                else if (accountType == 3) {
                                    //Передача названия магазина в переменную класса "Junior".
                                    junior.setShopName(shopName);
                                    //Вызов метода по расчёту оплаты покупки из класса "Junior" и передача суммы списания.
                                    junior.payForThePurchase(replenishment);
                                }
                            }
                            break;
                        case 6: //Если выбрана операция "Получить информацию о владельце счёта":
                            //Условие если выбран ОБЫЧНЫЙ тип счёта:
                            if (accountType == 1) {
                                //Вызов метода возвращающего информацию о владельце счета из класса "Regular".
                                regular.getInformationAboutTheOwner();
                            }
                            //Условие если выбран ПРОДВИНУТЫЙ тип счёта:
                            else if (accountType == 2) {
                                //Вызов метода возвращающего информацию о владельце счета из класса "Advanced".
                                advanced.getInformationAboutTheOwner();
                            }
                            //Условие если выбран МОЛОДЁЖНЫЙ тип счёта:
                            else if (accountType == 3) {
                                //Вызов метода возвращающего информацию о владельце счета из класса "Junior".
                                junior.getInformationAboutTheOwner();
                            }
                            break;
                        case 7: //Если выбрана операция "Рассчитать комиссию и штраф":
                            //Условие если выбран ОБЫЧНЫЙ тип счёта:
                            if (accountType == 1) {
                                //Вызов метода по расчёту штрафа из класса "Regular".
                                regular.getFine();
                            }
                            //Условие если выбран ПРОДВИНУТЫЙ тип счёта:
                            else if (accountType == 2) {
                                //Вызов метода по расчёту штрафа из класса "Regular".
                                advanced.getMaintenance();
                            }
                            //Условие если выбран МОЛОДЁЖНЫЙ тип счёта:
                            else if (accountType == 3) {
                                //Вызов метода по расчёту штрафа из класса "Junior".
                                junior.getFine();
                            }
                            break;
                        case 8: //Если выбрана операция "Вывести детализированную информацию по счёту":
                            //Условие если выбран ОБЫЧНЫЙ тип счёта:
                            if (accountType == 1) {
                                //Вызов метода детализации из класса "Regular".
                                regular.getDetailing();
                            }
                            //Условие если выбран ПРОДВИНУТЫЙ тип счёта:
                            else if (accountType == 2) {
                                //Вызов метода детализации из класса "Advanced".
                                advanced.getDetailing();
                            }
                            //Условие если выбран МОЛОДЁЖНЫЙ тип счёта:
                            else if (accountType == 3) {
                                //Вызов метода детализации из класса "Junior".
                                junior.getDetailing();

                            }
                            break;
                    }
                }
            } else  if (choice == 1) { //Если выбрана операция "Открытие счёта":
                System.out.println("\nКраткая информация о тарифах каждого типа счёта:\n\nОбычный счет - с этого счета взимается плата за обслуживание счета,\n которая составляет наименьшее из двух значений: 100 руб. или 10% от остатка на конец месяца.\n Существует штраф 100.00 руб., если баланс падает ниже минимума - 5000,00 руб.\n\nСчет продвинутый -  с этого счета взимается плата за обслуживание,\n которая составляет наименьшее из двух значений: 100 руб. или 10% от остатка на конец месяца.\n Кэшбек на все операции оплаты 1%, но не более 100 рублей, которые зачисляются на счет сразу после совершения операции оплаты.\n Требования минимального баланса отсутствуют.\n\nСчет молодежный -  плата за обслуживание по счету отсутствует.\n Кэшбек 2%, которые зачисляются на счет сразу после совершения операции оплаты.\n Существует штраф 300.00 руб, если не было операций оплаты в течении месяца,\n снимается в конце месяца. За каждую операцию снятия денег взимается комиссия в размере 10 рублей.\n\nВведите номер типа счёта, который вы бы хотели завести:\n\n1. Обычный.\n2. Продвинутый.\n3. Молодёжный.");
                //Запись номера выбранного пользователем аккаунта.
                accountType = scanner.nextInt();
                //Условие исключающее ошибку "если выбранный ип счёта уже заведён".
                if ((accountType == 1 & regularAccount) || (accountType == 2 & advancedAccount) || (accountType == 3 & juniorAccount)) {
                    //Вывод информации об ошибке.
                    System.out.println("\nУ вас уже открыт это тип счёта.\n Вы можете произвести любую другую операцию из перечня, кроме открытия.");
                } else { //Выполнение открытия счёта.
                    System.out.println("\nЧтобы открыть счёт нам понадобятся ваши данные.\nДля начала введите ваше имя: ");
                    //Запись введённого пользователем имени.
                    name = scanner.next();
                    System.out.println("\nТеперь введите вашу фамилию: ");
                    //Запись введённой пользователем фамилии.
                    surname = scanner.next();
                    System.out.println("\nВведите ваше отчество: ");
                    //Запись введённого пользователем отчества.
                    patronymic = scanner.next();
                    System.out.println("\nВведите сумму, которую вы бы хотели положить на выбранный счёт: ");
                    //Запись введённой пользователем суммы.
                    balance = scanner.nextDouble();
                    System.out.println("\nПридумайте 4-х значный ПИН-код для вашего счёта, он понадобится для совершения дальнейших действий над счётом.\nПИН-код должен состоять только из цифр.\nЭто необходимо в целях безопасности ваших средств и данных.\nНикому не разглашайте и не передавайте свой ПИН-код\n\nВведите ПИН-код: ");
                    //Запись введённого пользователем ПИН-кода.
                    int pinCode = scanner.nextInt();
                    //Вызов метода, выполняющего поверку нового ПИН-кода.
                    checkPinCodeLength(pinCode);
                    //Реализация заведения счёта.
                    switch (accountType) {
                        case 1: //Если выбран тип счёта "Обычный":
                            accountName = "Обычный";
                            //Инициализация счёта.
                            regular = new Regular(name, surname, patronymic, balance, String.valueOf(checkedPinCode).hashCode());
                            //Вызов метода, возвращающего информацию об успешно открытом счёте.
                            accountDetails();
                            //Присвоение переменной true. Это нужно, чтобы исключить ошибку "если тип данного счёта уже заведён, при повторном выборе открытия данного счёта".
                            regularAccount = true;
                            break;
                        case 2: //Если выбран тип счёта "Продвинутый":
                            accountName = "Продвинутый";
                            //Инициализация счёта.
                            advanced = new Advanced(name, surname, patronymic, balance, String.valueOf(checkedPinCode).hashCode());
                            //Вызов метода, возвращающего информацию об успешно открытом счёте.
                            accountDetails();
                            //Присвоение переменной true. Это нужно, чтобы исключить ошибку "если тип данного счёта уже заведён, при повторном выборе открытия данного счёта".
                            advancedAccount = true;
                            break;
                        case 3: //Если выбран тип счёта "Молодёжный":
                            accountName = "Молодёжный";
                            //Инициализация счёта.
                            junior = new Junior(name, surname, patronymic, balance, String.valueOf(checkedPinCode).hashCode());
                            //Вызов метода, возвращающего информацию об успешно открытом счёте.
                            accountDetails();
                            //Присвоение переменной true. Это нужно, чтобы исключить ошибку "если тип данного счёта уже заведён, при повторном выборе открытия данного счёта".
                            juniorAccount = true;
                            break;
                    }
                }
            } else if (choice == 9){ //Если выбрано действие "Выйти из аккаунта":
                //Вывод сообщения о выходе из аккаунта.
                System.out.println("\nВы вышли из аккаунта.");
                //Выход из цикла.
                exit = true;
            } else { //Если введён номер несуществующей операции.
                System.out.println("\nТакой операции нет.");
            }
        }
    }
}